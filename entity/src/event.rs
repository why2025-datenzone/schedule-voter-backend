//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "event")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_type = "Text")]
    pub title: String,
    #[sea_orm(column_type = "Text", unique)]
    pub slug: String,
    pub voting: bool,
    #[sea_orm(column_type = "JsonBinary")]
    pub content: Json,
    pub version: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::source::Entity")]
    Source,
    #[sea_orm(has_many = "super::user_event::Entity")]
    UserEvent,
    #[sea_orm(has_many = "super::vote::Entity")]
    Vote,
}

impl Related<super::source::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Source.def()
    }
}

impl Related<super::user_event::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserEvent.def()
    }
}

impl Related<super::vote::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Vote.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        super::user_event::Relation::User.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::user_event::Relation::Event.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
