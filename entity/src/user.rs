//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_type = "Text")]
    pub name: String,
    #[sea_orm(column_type = "Text", unique)]
    pub email: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub password: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub provider: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub account: Option<String>,
    pub can_create: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::token::Entity")]
    Token,
    #[sea_orm(has_many = "super::user_event::Entity")]
    UserEvent,
}

impl Related<super::token::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Token.def()
    }
}

impl Related<super::user_event::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserEvent.def()
    }
}

impl Related<super::event::Entity> for Entity {
    fn to() -> RelationDef {
        super::user_event::Relation::Event.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::user_event::Relation::User.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
