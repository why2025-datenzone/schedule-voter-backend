//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "source")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub event: i32,
    #[sea_orm(column_type = "Text")]
    pub slug: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub url: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub event_slug: Option<String>,
    #[sea_orm(column_type = "Text")]
    pub updatekey: String,
    pub interval: Option<i32>,
    #[sea_orm(column_type = "Text", nullable)]
    pub apikey: Option<String>,
    pub filter: Option<i32>,
    pub autoupdate: bool,
    pub last_update: Option<DateTime>,
    pub last_attemp: Option<DateTime>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub submission_types: Option<Json>,
    pub type_filter: Vec<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::event::Entity",
        from = "Column::Event",
        to = "super::event::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Event,
    #[sea_orm(has_many = "super::submission::Entity")]
    Submission,
}

impl Related<super::event::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Event.def()
    }
}

impl Related<super::submission::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Submission.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
